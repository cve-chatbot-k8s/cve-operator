/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	"fmt"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"time"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// GitHubReleasesMonitorSpec defines the desired state of GitHubReleasesMonitor
type GitHubReleasesMonitorSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	URL         string `json:"url"`
	MonitorFrom string `json:"monitorFrom"`
	// Specifies how to treat concurrent executions of a Job.
	// Valid values are:
	// - "Allow" (default): allows CronJobs to run concurrently;
	// - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet;
	// - "Replace": cancels currently running job and replaces it with a new one
	// +optional
	ConcurrencyPolicy ConcurrencyPolicy `json:"concurrencyPolicy,omitempty"`
}

// GitHubReleasesMonitorStatus defines the observed state of GitHubReleasesMonitor
type GitHubReleasesMonitorStatus struct {
	// Releases is a list of releases found on the GitHub repository.
	Releases []string `json:"releases,omitempty"`
	// LastChecked is the time (in UTC) the value was retrieved.
	LastChecked metav1.Time `json:"lastChecked,omitempty"`
	// MonitorFromTimestamp is the value of monitorFrom in the form of timestamp (in UTC).
	MonitorFromTimestamp metav1.Time `json:"monitorFromTimestamp,omitempty"`
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// GitHubReleasesMonitor is the Schema for the githubreleasesmonitors API
type GitHubReleasesMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GitHubReleasesMonitorSpec   `json:"spec,omitempty"`
	Status GitHubReleasesMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitHubReleasesMonitorList contains a list of GitHubReleasesMonitor
type GitHubReleasesMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitHubReleasesMonitor `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GitHubReleasesMonitor{}, &GitHubReleasesMonitorList{})
}

// ConcurrencyPolicy describes how the job will be handled.
// Only one of the following concurrent policies may be specified.
// If none of the following policies is specified, the default one
// is AllowConcurrent.
// +kubebuilder:validation:Enum=Allow;Forbid;Replace
type ConcurrencyPolicy string

const (
	// AllowConcurrent allows CronJobs to run concurrently.
	AllowConcurrent ConcurrencyPolicy = "Allow"

	// ForbidConcurrent forbids concurrent runs, skipping next run if previous
	// hasn't finished yet.
	ForbidConcurrent ConcurrencyPolicy = "Forbid"

	// ReplaceConcurrent cancels currently running job and replaces it with a new one.
	ReplaceConcurrent ConcurrencyPolicy = "Replace"
)

// ValidateMonitorFrom checks if the monitorFrom value is "now" or a valid date.
// Returns a time.Time object representing the date to start monitoring from, and any error encountered.
func (spec *GitHubReleasesMonitorSpec) ValidateMonitorFrom() (time.Time, error) {
	if spec.MonitorFrom == "now" {
		// If the value is "now", return the current time
		return time.Now(), nil
	} else {
		// Try to parse the date string
		parsedTime, err := time.Parse("2006-01-02", spec.MonitorFrom)
		if err != nil {
			// If parsing fails, return an error
			return time.Time{}, fmt.Errorf("monitorFrom must be 'now' or a valid date in YYYY-MM-DD format")
		}
		return parsedTime, nil
	}
}
